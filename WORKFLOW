You check out the experiment branch, and then rebase it 
onto the master branch as follows:

$ git checkout experiment
$ git rebase master

This operation works by going to the common ancestor of 
the two branches (the one you’re on and the one you’re 
rebasing onto), getting the diff introduced by each commit 
of the branch you’re on, saving those diffs to temporary 
files, resetting the current branch to the same commit as 
the branch you are rebasing onto, and finally applying each 
change in turn.

At this point, you can go back to the master branch and do 
a fast-forward merge.

$ git checkout master
$ git merge experiment

There is no difference in the end product of the 
integration, but rebasing makes for a cleaner history. If 
you examine the log of a rebased branch, it looks like a 
linear history: it appears that all the work happened in 
series, even when it originally happened in parallel.

You can remove the test branch because all 
the work is integrated and you don’t need them anymore.

$ git branch -d test-branch
